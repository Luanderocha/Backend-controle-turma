<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>5 principles for deploying your API from a CI/CD pipeline</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2V0lms0OTHE/" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="continuous deployment" scheme="searchisko:content:tags" /><category term="continuous integration" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Red Hat 3scale API Management" scheme="searchisko:content:tags" /><category term="Red Hat Integration" scheme="searchisko:content:tags" /><author><name>Nicolas Massé</name></author><id>searchisko:content:id:jbossorg_blog-5_principles_for_deploying_your_api_from_a_ci_cd_pipeline</id><updated>2019-07-26T07:00:47Z</updated><published>2019-07-26T07:00:47Z</published><content type="html">&lt;p&gt;With companies generating more and more revenue through their APIs, these APIs also have become even more critical. Quality and reliability are key goals sought by companies looking for large scale use of their APIs, and those goals are usually supported through well-crafted DevOps processes. Figures from the tech giants make us dizzy: &lt;a href="https://techbeacon.com/devops/10-companies-killing-it-devops"&gt;Amazon is deploying code to production every 11.7 seconds, Netflix deploys thousands of time per day, and Fidelity saved $2.3 million per year with their new release framework&lt;/a&gt;. So, if you have APIs, you might want to deploy your API from a CI/CD pipeline.&lt;/p&gt; &lt;p&gt;Deploying your API from a CI/CD pipeline is a &lt;a href="https://developers.redhat.com/blog/2019/02/25/full-api-lifecycle-management-a-primer/"&gt;key activity of the &amp;#8220;Full API Lifecycle Management&lt;/a&gt;.&amp;#8221; Sitting between the &amp;#8220;Implement&amp;#8221; and &amp;#8220;Secure&amp;#8221; phases, the &amp;#8220;Deploy&amp;#8221; activity encompasses every process needed to bring the API from source code to the production environment. To be more specific, it covers Continuous Integration and Continuous Delivery.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-611237 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-1024x258.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-300x76.png" alt="Deploy your API from a CI/CD pipeline - High Level view" width="300" height="76" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-300x76.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-768x194.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-High-Level-view-1024x258.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;br /&gt; &lt;span id="more-608917"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;An API is not &amp;#8220;just another piece of software&amp;#8221;&lt;/h2&gt; &lt;p&gt;At Red Hat, we strongly believe an API is not “just another piece of software.&amp;#8221; Instead, we think an API is a software component in conjunction with:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An interface to communicate with it.&lt;/li&gt; &lt;li&gt;An ecosystem of consumers that communicate with this software.&lt;/li&gt; &lt;li&gt;A relationship with developers consuming this API.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;An API is built, deployed, and managed not just with the usual methods; as a result, deploying your API from a CI/CD pipeline requires additional processes, tools, and skills.&lt;/p&gt; &lt;p&gt;In this article, we will focus on the overarching principles and key steps to deploy your API from a CI/CD pipeline.&lt;/p&gt; &lt;h2&gt;Overarching principles to deploy your API from a CI/CD pipeline&lt;/h2&gt; &lt;h3&gt;1. Use a contract-first approach&lt;/h3&gt; &lt;p&gt;Although a code-first approach does not prevent you from deploying your API from a CI/CD pipeline, using a contract-first approach makes your processes much more reliable and streamlined.&lt;/p&gt; &lt;p&gt;In a contract-first approach, the API contract (for REST APIs the contract is named &amp;#8220;OpenAPI Specification&amp;#8221;) is crafted well ahead of the implementation phase. It is a collaboration between the product owner, the architects, the developers, and the early customers. &lt;a href="https://www.apicur.io/"&gt;The Apicurio Studio can help you easily craft OpenAPI Specifications, collaboratively.&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;2. Ensure the testability of your API&lt;/h3&gt; &lt;p&gt;To deploy your API from a CI/CD pipeline in an automated manner, tests are needed. There are different kinds of tests and a full book would be required to cover them all. To deploy your API from a CI/CD pipeline you would need to have at least:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Unit tests: to test individually each smallest software component.&lt;/li&gt; &lt;li&gt;Integration tests: to test a bigger chunk of software components together.&lt;/li&gt; &lt;li&gt;Acceptance tests: to ensure business expectations are met (as part of the &lt;a href="https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development"&gt;acceptance test-driven development methodology&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;End-to-end tests: to ensure every software component in the chain is working as expected, in a production-like environment.&lt;/li&gt; &lt;li&gt;Performance tests: to ensure the performance is not degraded by a fix or a new feature.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Unit and integration tests are well known from developers. Let&amp;#8217;s focus on the usage of the later ones.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Acceptance tests can be managed from a dedicated tool, such as &lt;a href="https://microcks.github.io/"&gt;Microcks,&lt;/a&gt; and triggered by your CI/CD pipeline.&lt;/li&gt; &lt;li&gt;Performance tests can also be automated as explained in this blog post series: &lt;a href="https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/"&gt;Leveraging Kubernetes and OpenShift for automated performance tests&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;3. Adhere to the semantic versioning&lt;/h3&gt; &lt;p&gt;When releasing new versions of your API, it is critical to adhere to the &lt;a href="https://semver.org/"&gt;semantic versioning&lt;/a&gt;. It helps your CI/CD pipeline know how to deal with new releases: new minor versions are backward compatible, they can be deployed &amp;#8220;in place&amp;#8221;. Major versions will need to be deployed &amp;#8220;side-by-side&amp;#8221; to keep existing customers happy.&lt;/p&gt; &lt;h3&gt;4. Be idempotent&lt;/h3&gt; &lt;p&gt;When managing software at scale, all tech giants will tell you: stuff happens. Servers fail, routers drop packets, hard disks loose data, etc. One way to be resilient to such kind of events is to be &lt;a href="https://en.wikipedia.org/wiki/Idempotence"&gt;idempotent&lt;/a&gt;. Instead of creating a new service in your API Management solution, state that this service has to be present. Instead of deleting it, state it has to be absent. This way, your pipelines will be reliable in case of outages or transient perturbations.&lt;/p&gt; &lt;p&gt;Most operations of the &lt;a href="https://github.com/3scale/3scale_toolbox"&gt;new 3scale CLI have been designed to be idempotent&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;5. Apply the API-Management-as-Code principles&lt;/h3&gt; &lt;p&gt;Akin to the &amp;#8220;Infrastructure-as-Code&amp;#8221; principle, the &amp;#8220;API-Management-as-Code&amp;#8221; principle says that the state of your API management solution is fully determined by the content of your Git repositories. Services are defined by their OpenAPI apecification file, committed in your Git repository; Application plans are defined in an artefact file, also in your Git repository; and so on with the environment settings, API documentation, etc.&lt;/p&gt; &lt;h2&gt;Steps to deploy your API from a CI/CD pipeline&lt;/h2&gt; &lt;h3&gt;1. Prepare the release&lt;/h3&gt; &lt;p&gt;Since you applied API-Management-as-Code principles, all your artefacts are versioned and stored in a Git repository. To deploy your API from a CI/CD pipeline, start by &lt;strong&gt;checking out the repository.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Inside your Git repository is the API contract. &lt;strong&gt;Read the OpenAPI specification file&lt;/strong&gt; and extract the relevant information for your pipeline:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The field &amp;#8220;info.version&amp;#8221; is useful to apply semantic versioning.&lt;/li&gt; &lt;li&gt;The vendor extension fields (&amp;#8220;x-*&amp;#8221; fields) in the &amp;#8220;info&amp;#8221; object can be used to hold metadata (Business Unit in charge, target channel, state, etc.).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;From the OpenAPI specification, &lt;strong&gt;generate a Mock&lt;/strong&gt; that will be exposed to your early adopters. Later, it will be used by all your API consumers to develop their client implementation. Tools such as &lt;a href="https://microcks.github.io/"&gt;Microcks&lt;/a&gt; can generate a mock from your OpenAPI specification file.&lt;/p&gt; &lt;p&gt;From those data, you can &lt;strong&gt;compute the API versioning and status&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The API is &lt;/span&gt;&lt;b&gt;versioned&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; according to semantic versioning: minor and patch versions are released continuously in place of the previous version. Existing consumers are always using the latest version. Major versions are released side-by-side and the previous API starts its deprecation countdown.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;The API &lt;strong&gt;status&lt;/strong&gt; can be computed from vendor extension fields or free-form metadata. It goes through those successive states :&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Created&lt;/strong&gt;: The API is in working state, present on the developer portal but only accessible to early adopters.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Published&lt;/strong&gt;: The API is GA, anyone can subscribe. The subscription goes through the chosen workflow (with or without approval).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;: The API is marked as deprecated. This reflects in the Developer Portal. No new third parties can subscribe to this API. API Gateway policies are enabled to communicate the retirement date (through headers or delays for instance).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Retired&lt;/strong&gt;: The API is removed from the Admin Portal and from the Developer Portal.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;2. Deploy the API&lt;/h3&gt; &lt;p&gt;Based on all this information, you can now &lt;strong&gt;publish the API in your API management solution&lt;/strong&gt;. This will declare a new service or update the existing one and apply the correct configuration.&lt;/p&gt; &lt;p&gt;If your API requires custom API gateway policies, you will have to &lt;strong&gt;build a container image of your API gateway, containing the custom policy&lt;/strong&gt;. The policy code is also stored in your Git repository. Once built, you can &lt;strong&gt;trigger a new deployment &lt;/strong&gt;of the API gateway container.&lt;/p&gt; &lt;h3&gt;3. Test your API&lt;/h3&gt; &lt;p&gt;You can now ensure business expectations are met by &lt;strong&gt;running acceptance tests&lt;/strong&gt; (from the &lt;a href="https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development"&gt;acceptance test-driven development methodology&lt;/a&gt;). A tool such as &lt;a href="https://microcks.github.io/"&gt;Microcks&lt;/a&gt; can help you store, manage and run tests for your APIs. Having all your API test suites stored in one place is convenient: for each minor release, you can run the test suites of all previous releases. Thus ensuring the new release is actually backward compatible with the previous ones.&lt;/p&gt; &lt;p&gt;To deploy your API from a CI/CD pipeline, you will also have to &lt;strong&gt;publish application plans &lt;/strong&gt;from the artefact files stored in your Git repository. Those staged plans are your service offering for API consumers. They hold quotas for each method, pricing rules for monetization, as well as the features list. The application plans are described as YAML files. They can be crafted by hand or from a GUI by the product owner and committed in your Git repository.&lt;/p&gt; &lt;p&gt;Once the application plans are published, you will have to &lt;strong&gt;create a new client application&lt;/strong&gt; that will be used for end-to-end tests. This client application will hold some credentials that you can use to query the deployed API. Those end-to-end tests make sure the whole chain (firewall, reverse proxies, API gateway, admin portal, API back end, load balancers, etc.) are working. To be meaningful, end-to-end tests have to test the newly added API methods.&lt;/p&gt; &lt;h3&gt;4. Release your API&lt;/h3&gt; &lt;p&gt;Your new API release has been deployed! You can now &lt;strong&gt;publish the API documentation&lt;/strong&gt; on your developer portal. You will have to take care of updating the OpenAPI Specification file to match the target environment. For OpenAPI Specification 2.0, this means updating the &lt;em&gt;host&lt;/em&gt;, &lt;em&gt;basePath&lt;/em&gt;, &lt;em&gt;schemes&lt;/em&gt;, but also the &lt;em&gt;securityDefinitions&lt;/em&gt; objects to replace the &lt;em&gt;authorizationUrl&lt;/em&gt; and &lt;em&gt;tokenUrl&lt;/em&gt; with their valid counterparts in the target environment.&lt;/p&gt; &lt;p&gt;The final touch to deploy your API from a CI/CD pipeline would be to &lt;strong&gt;notify your existing API consumers&lt;/strong&gt; that a new minor release has been deployed. You can also send them a public release note if this is part of your processes.&lt;/p&gt; &lt;h2&gt;Rollback&lt;/h2&gt; &lt;p&gt;If something goes wrong during the CI/CD pipeline, you might be interested in rolling back any modification done so far. If you followed our idempotence and API-Management-as-Code principles, this has never been so easy: you can &lt;strong&gt;just trigger a new pipeline run &lt;/strong&gt;of the previous minor release, and the previous state of the system will be restored.&lt;/p&gt; &lt;h2&gt;Environments&lt;/h2&gt; &lt;p&gt;If you have multiple environments in your company (as most, if not all our customers, have), those steps will have to be repeated in each environment.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-611247 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-1024x505.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-300x148.png" alt="Deploy your API from a CI/CD pipeline - with environments" width="300" height="148" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-300x148.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-768x379.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/CI-CD-Pipeline-With-environments-1024x505.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;There are some subtleties though:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The first step (release preparation) is done once for all.&lt;/li&gt; &lt;li&gt;The API gateway container image is also built only once and then deployed identically in each environment.&lt;/li&gt; &lt;li&gt;Acceptance tests are run in functional environments whereas end-to-end tests are run in production-like environments (as well as performance tests).&lt;/li&gt; &lt;li&gt;API consumers are notified only in production and production-like environments.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;How many environments you need is entirely up to your internal processes. Some companies are fine with three environments, others need nine environments.&lt;/p&gt; &lt;p&gt;You can leverage the multi-tenant capabilities of the API management solution to handle multiple environments on one installation. However, a separated sandbox (usually in the development environment) is needed to test the N+1 version of the API management solution before applying the update.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;As you can see, a lot of work is needed to deploy your API from a CI/CD pipeline! It is a good idea to choose a solution that comes with a helper CLI handling most of those operations. This way, you can focus on what matters the most: your code implementing business features.&lt;/p&gt; &lt;p&gt;Discover how the API management capability of Red Hat Integration can help you deploy your API from a CI/CD pipeline:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=611307"&gt;3scale toolbox: Deploy an API from the CLI&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612387"&gt;Deploy your API from a Jenkins Pipeline&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612407"&gt;Using the 3scale toolbox Jenkins Shared Library&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#38;linkname=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2F5-principles-for-deploying-your-api-from-a-ci-cd-pipeline%2F&amp;#038;title=5%20principles%20for%20deploying%20your%20API%20from%20a%20CI%2FCD%20pipeline" data-a2a-url="https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/" data-a2a-title="5 principles for deploying your API from a CI/CD pipeline"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2V0lms0OTHE" height="1" width="1" alt=""/&gt;</content><summary>With companies generating more and more revenue through their APIs, these APIs also have become even more critical. Quality and reliability are key goals sought by companies looking for large scale use of their APIs, and those goals are usually supported through well-crafted DevOps processes. Figures from the tech giants make us dizzy: Amazon is deploying code to production every 11.7 seconds, Net...</summary><dc:creator>Nicolas Massé</dc:creator><dc:date>2019-07-26T07:00:47Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/</feedburner:origLink></entry><entry><title>DevNation Live: Subatomic reactive systems with Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ripgBkVrW58/" /><category term="devnation" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><author><name>Editorial Team</name></author><id>searchisko:content:id:jbossorg_blog-devnation_live_subatomic_reactive_systems_with_quarkus</id><updated>2019-07-26T06:59:16Z</updated><published>2019-07-26T06:59:16Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;DevNation Live tech talks&lt;/a&gt; are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, &lt;a href="https://developers.redhat.com/videos/youtube/-Cj5EhDZ0fg/"&gt;Clement Escoffier&lt;/a&gt;, Principal Software Engineer at Red Hat, will dive into the reactive side of &lt;a href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/"&gt;Quarkus&lt;/a&gt;.&lt;span id="more-612637"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Quarkus provides a supersonic development experience and a subatomic execution environment thanks to its integration with GraalVM. But, that&amp;#8217;s not all. Quarkus also unifies the imperative and reactive paradigm.&lt;/p&gt; &lt;p&gt;This discussion is about the reactive side of Quarkus and how you can use it to implement reactive and data streaming applications. From WebSockets to Kafka integration and reactive streams, you will learn how to build a reactive system with Quarkus.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/fQMg3Ve6Ep8" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;Learn more&lt;/h3&gt; &lt;p&gt;Join us at an upcoming &lt;a href="https://developers.redhat.com/events/"&gt;developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Live tech talks&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#38;linkname=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F26%2Fdevnation-live-subatomic-reactive-systems-with-quarkus%2F&amp;#038;title=DevNation%20Live%3A%20Subatomic%20reactive%20systems%20with%20Quarkus" data-a2a-url="https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/" data-a2a-title="DevNation Live: Subatomic reactive systems with Quarkus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/"&gt;DevNation Live: Subatomic reactive systems with Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ripgBkVrW58" height="1" width="1" alt=""/&gt;</content><summary>DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, Clement Escoffier, Principal Software Engineer at Red Hat, will dive into the reactive side of Quarkus. Quarkus provides a supersonic development experience and a subatomic execution environment thanks t...</summary><dc:creator>Editorial Team</dc:creator><dc:date>2019-07-26T06:59:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/</feedburner:origLink></entry><entry><title>Controlling Red Hat OpenShift from an OpenShift pod</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_YKuAPeu07I/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Python" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><author><name>Rarm Nagalingam</name></author><id>searchisko:content:id:jbossorg_blog-controlling_red_hat_openshift_from_an_openshift_pod</id><updated>2019-07-25T07:00:15Z</updated><published>2019-07-25T07:00:15Z</published><content type="html">&lt;p&gt;This article explains how to configure a Python application running within an &lt;a href="http://developers.redhat.com/openshift/"&gt;OpenShift&lt;/a&gt; pod to communicate with the Red Hat OpenShift cluster via &lt;code&gt;openshift-restclient-python&lt;/code&gt;, the OpenShift Python client.&lt;span id="more-612997"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-613637 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/07/openshift_incluster-1024x546.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/openshift_incluster-1024x546.png" alt="" width="640" height="341" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/openshift_incluster-1024x546.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/openshift_incluster-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/openshift_incluster-768x409.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/openshift_incluster.png 1246w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;h2&gt;tl;dr&lt;/h2&gt; &lt;p&gt;The code sample below is a sample application running within a pod, which connects to an OpenShift cluster and prints a list of projects:&lt;/p&gt; &lt;pre&gt;import os import sys import yaml from kubernetes import client, config from openshift.dynamic import DynamicClient config.load_incluster_config() k8s_config = client.Configuration() k8s_client = client.api_client.ApiClient(configuration=k8s_config) dyn_client = DynamicClient(k8s_client) v1_projects = dyn_client.resources.get(api_version="project.openshift.io/v1", kind="Project") print(v1_projects.get()) &lt;/pre&gt; &lt;h2&gt;Running locally&lt;/h2&gt; &lt;p&gt;Using &lt;code&gt;openshift-restclient-python&lt;/code&gt; from your laptop is relatively easy. This OpenShift dynamic client extends the standard &lt;a href="http://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; Python client. The first step is to install &lt;code&gt;openshift-restclient-python&lt;/code&gt;, which will pull in the &lt;code&gt;kubernetes&lt;/code&gt; dependency:&lt;/p&gt; &lt;pre&gt;$ pip install openshift &lt;/pre&gt; &lt;p&gt;Next, we load a Kube configuration. The Kubernetes function &lt;code&gt;new_client_from_config()&lt;/code&gt; searches for the file &lt;code&gt;~/.kube/config&lt;/code&gt;. The &lt;code&gt;new_client_from_config()&lt;/code&gt; function is similar to the &lt;code&gt;load_kube_config()&lt;/code&gt; function, but also returns an &lt;code&gt;ApiClient&lt;/code&gt; to be used with any API object. This task allows the caller to concurrently talk with multiple clusters.&lt;/p&gt; &lt;p&gt;The code example below uses the OpenShift dynamic client to list every project the user can access:&lt;/p&gt; &lt;pre&gt;#!/usr/bin/env python3 from kubernetes import client, config from openshift.dynamic import DynamicClient k8s_client = config.new_client_from_config() dyn_client = DynamicClient(k8s_client) v1_projects = dyn_client.resources.get(api_version='project.openshift.io/v1', kind='Project') project_list = v1_projects.get() for project in project_list.items: print(project.metadata.name) &lt;/pre&gt; &lt;p&gt;Running locally after logging into OpenShift works as expected:&lt;/p&gt; &lt;pre&gt;oc login -u user https://ocp.lab.example.com ./cmdlineclient.py ProjectA ProjectB &lt;/pre&gt; &lt;h2&gt;Running within Red Hat OpenShift&lt;/h2&gt; &lt;p&gt;However, running the same code with an OpenShift pod will result in a &lt;code&gt;TypeError&lt;/code&gt;, as shown below:&lt;/p&gt; &lt;pre&gt;oc rsh api-gateway-dfs3 cd /opt/app-root/src/ ./cmdlineclient.py Traceback (most recent call last): File "./cmdlineclient.py", line 6, in &amp;#60;module&amp;#62; k8s_client = config.new_client_from_config() File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 667, in new_client_from_config persist_config=persist_config) File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 645, in load_kube_config persist_config=persist_config) File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 613, in _get_kube_config_loader_for_yaml_file **kwargs) File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 153, in __init__ self.set_active_context(active_context) File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 173, in set_active_context context_name = self._config['current-context'] File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 495, in __getitem__ v = self.safe_get(key) File "/opt/app-root/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 491, in safe_get key in self.value): TypeError: argument of type 'NoneType' is not iterable&lt;/pre&gt; &lt;p&gt;Unfortunately, the current documentation provided by &lt;code&gt;openshift-restclient-python&lt;/code&gt; is lacking. It does not explain how to connect to OpenShift or Kubernetes from within a pod.&lt;/p&gt; &lt;p&gt;After much searching, I found a section within the Kubernetes documentation which states that when accessing the Kube API from a pod, locating and authenticating the API server are somewhat different. They recommend using one of the official client libraries, which I was already doing. These libraries should automatically discover the API server and authenticate.&lt;/p&gt; &lt;p&gt;The Kubernetes config library also has the function &lt;code&gt;load_incluster_config()&lt;/code&gt;. This function uses a combination of environment variables and a token to authenticate the API server. The recommended way to do this is to associate a pod with a service account. When the pod is started, a token for the service account is placed into the filesystem tree of each container in that pod, at &lt;code&gt;/var/run/secrets/kubernetes.io/serviceaccount/token&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;That all sounds simple enough. But, before updating the &lt;code&gt;cmdlineclient&lt;/code&gt;, we need to create a service account, assign it a role, and then associate it with a pod (via a deployment config). The following instructions outline how to use the &lt;code&gt;oc&lt;/code&gt; client to achieve this:&lt;/p&gt; &lt;pre&gt;oc create serviceaccount robot oc policy add-role-to-user admin -z robot oc patch dc/api-gw --patch '{"spec":{"template":{"spec":{"serviceAccountName": "robot"}}}}' oc rsh api-gw-9-kzrhn (app-root) sh-4.2$ ls -al /var/run/secrets/kubernetes.io/serviceaccount/token lrwxrwxrwx. 1 root root 12 Jul 14 06:13 /var/run/secrets/kubernetes.io/serviceaccount/token -&amp;#62; ..data/token&lt;/pre&gt; &lt;p&gt;Now that we confirmed that a token is being injected within the pod, we need to update our function to use &lt;code&gt;load_incluster_config()&lt;/code&gt;. However, remember that &lt;code&gt;new_client_from_config()&lt;/code&gt; returns an &lt;code&gt;ApiClient&lt;/code&gt;. We need to ensure we do this update before passing the &lt;code&gt;ApiClient&lt;/code&gt; to the OpenShift dynamic client. Another undocumented step relates to the OpenShift dynamic client requiring a &lt;code&gt;client.configuration&lt;/code&gt; object within the Kubernetes &lt;code&gt;ApiClient&lt;/code&gt; object.&lt;/p&gt; &lt;p&gt;Lastly, we should also ensure that our code will work both within OpenShift and on our laptop. The updated &lt;code&gt;cmdlineclientv2.py&lt;/code&gt; (below) determines if the client is running within OpenShift before calling the &lt;code&gt;load_incluster_config()&lt;/code&gt;. It will also fall back to reading &lt;code&gt;~/.kube/config&lt;/code&gt;, which enables the program to run locally:&lt;/p&gt; &lt;pre&gt;#!/usr/bin/env python3 import os import sys import yaml from kubernetes import client, config from openshift.dynamic import DynamicClient # Check if code is running in OpenShift if "OPENSHIFT_BUILD_NAME" in os.environ: config.load_incluster_config() file_namespace = open( "/run/secrets/kubernetes.io/serviceaccount/namespace", "r" ) if file_namespace.mode == "r": namespace = file_namespace.read() print("namespace: %s\n" %(namespace)) else: config.load_kube_config() # Create a client config k8s_config = client.Configuration() k8s_client = client.api_client.ApiClient(configuration=k8s_config) dyn_client = DynamicClient(k8s_client) v1_projects = dyn_client.resources.get(api_version="project.openshift.io/v1", kind="Project") project_list = v1_projects.get() for project in project_list.items: print("Project Name: %s" % (project.metadata.name)) &lt;/pre&gt; &lt;p&gt;When running &lt;code&gt;cmdlineclientv2&lt;/code&gt;, notice that although we have assigned the &lt;code&gt;admin&lt;/code&gt; role to the service account, it is only &lt;code&gt;admin&lt;/code&gt; within the &lt;code&gt;ProjectA&lt;/code&gt; namespace:&lt;/p&gt; &lt;pre&gt;./cmdlineclientv2.py namespace: ProjectA Project Name: ProjectA &lt;/pre&gt; &lt;p&gt;I hope you found this post helpful. Comments and questions are welcome.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#38;linkname=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F25%2Fcontrolling-red-hat-openshift-from-an-openshift-pod%2F&amp;#038;title=Controlling%20Red%20Hat%20OpenShift%20from%20an%20OpenShift%20pod" data-a2a-url="https://developers.redhat.com/blog/2019/07/25/controlling-red-hat-openshift-from-an-openshift-pod/" data-a2a-title="Controlling Red Hat OpenShift from an OpenShift pod"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/25/controlling-red-hat-openshift-from-an-openshift-pod/"&gt;Controlling Red Hat OpenShift from an OpenShift pod&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_YKuAPeu07I" height="1" width="1" alt=""/&gt;</content><summary>This article explains how to configure a Python application running within an OpenShift pod to communicate with the Red Hat OpenShift cluster via openshift-restclient-python, the OpenShift Python client. tl;dr The code sample below is a sample application running within a pod, which connects to an OpenShift cluster and prints a list of projects: import os import sys import yaml from kubernetes imp...</summary><dc:creator>Rarm Nagalingam</dc:creator><dc:date>2019-07-25T07:00:15Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/25/controlling-red-hat-openshift-from-an-openshift-pod/</feedburner:origLink></entry><entry><title>Red Hat Enterprise Linux 8.1 Beta brings new development tools</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Uxt5qlDnqRw/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="GCC 9" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="RHEL8" scheme="searchisko:content:tags" /><author><name>Mike Guerette</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_enterprise_linux_8_1_beta_brings_new_development_tools</id><updated>2019-07-24T13:30:36Z</updated><published>2019-07-24T13:30:36Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400;"&gt;In May, we announced the general availability of &lt;/span&gt;&lt;a href="https://developers.redhat.com/blog/2019/05/07/red-hat-enterprise-linux-8-now-generally-available/"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Enterprise Linux (RHEL) 8&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, the intelligent operating system which we believe is the best RHEL ever for developers. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The work on Red Hat Enterprise Linux 8 continues, and we are pleased to &lt;a href="http://redhat.com/en/blog/red-hat-enterprise-linux-81-beta-now-available"&gt;announce&lt;/a&gt; the beta availability of RHEL 8.1., which enables greater developer productivity, improves manageability, and adds new security enhancements. This release also includes updated drivers that deliver new features and bug fixes for supported hardware platforms.&lt;/span&gt;&lt;span id="more-612197"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;New application streams&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;RHEL 8.1 Beta delivers several new &lt;a href="https://developers.redhat.com/blog/2018/11/15/rhel8-introducing-appstreams/"&gt;application streams&lt;/a&gt; with new and/or updated developers tools, application frameworks, and languages. These include:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;GCC Toolset 9&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Node.js 12&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Ruby 2.6&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;PHP 7.3&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Nginx 1.16&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Update of Go 1.12&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Update of Clang/LLVM 8&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;All of these packages can be obtained using &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;yum&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;, and are included in all Red Hat Enterprise Linux subscriptions. &lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;Image Builder&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Enterprise Linux 8 introduced Image Builder, a component that lets you create custom system images in a variety of formats. With RHEL 8.1 Beta, Image Builder is extended to support more configuration options for adding users and SSH keys. New image formats have also been added to support cloud platforms such as Google Cloud Platform and Alibaba Cloud. With these additions, RHEL 8.1 Beta now supports every major cloud infrastructure platform including AWS, Microsoft Azure, OpenStack, and VMware.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;More good stuff in RHEL 8.1 Beta&lt;/h2&gt; &lt;h3&gt;&lt;b&gt;Improved manageability&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The Red Hat Enterprise Linux web console now supports finer granularity when configuring firewall rules and system services, including:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Better configuration for firewall zones.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Log filtering based on services.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Service filtering based on metadata like service name and state. &lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Additionally, for virtual machines (VMs) running on RHEL 8.1 Beta, you can now use the web console for importing existing QCOW images, managing different types of storage pools and modifying autostart configuration and memory allocation, as well as pausing and resuming existing VMs.&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Enhanced security&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Security continues to be an important focus for Red Hat Enterprise Linux, and RHEL 8.1 Beta adds container-centric SELinux profiles. With this new capability, you can create a more tailored security policy for better control of how a container accesses host system resources such as storage, compute and network. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;This approach enables customers to more effectively harden their container deployments against security violations, making it easier to achieve and maintain regulatory compliance. Administrators can also be far more selective about which applications are permitted to be launched on a system using a new application whitelisting functionality. This feature reduces the potential risk of running unknown or untrustworthy applications. Additionally, RHEL 8.1 Beta will be used as we pursue additional FIPS-140 and Common Criteria certification for the platform. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/rhel8/"&gt;Download Red Hat Enterprise Linux 8.1 beta&lt;/a&gt; today.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fred-hat-enterprise-linux-8-1-beta-brings-new-development-tools%2F&amp;#038;title=Red%20Hat%20Enterprise%20Linux%208.1%20Beta%20brings%20new%20development%20tools" data-a2a-url="https://developers.redhat.com/blog/2019/07/24/red-hat-enterprise-linux-8-1-beta-brings-new-development-tools/" data-a2a-title="Red Hat Enterprise Linux 8.1 Beta brings new development tools"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/24/red-hat-enterprise-linux-8-1-beta-brings-new-development-tools/"&gt;Red Hat Enterprise Linux 8.1 Beta brings new development tools&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Uxt5qlDnqRw" height="1" width="1" alt=""/&gt;</content><summary>In May, we announced the general availability of Red Hat Enterprise Linux (RHEL) 8, the intelligent operating system which we believe is the best RHEL ever for developers.  The work on Red Hat Enterprise Linux 8 continues, and we are pleased to announce the beta availability of RHEL 8.1., which enables greater developer productivity, improves manageability, and adds new security enhancements. This...</summary><dc:creator>Mike Guerette</dc:creator><dc:date>2019-07-24T13:30:36Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/24/red-hat-enterprise-linux-8-1-beta-brings-new-development-tools/</feedburner:origLink></entry><entry><title>What’s new in the Visual Studio Code XML Extension</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/AEdExHcuPXQ/" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="Eclipse Che" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Visual Studio Code" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><category term="XML" scheme="searchisko:content:tags" /><author><name>Nikolas Komonen</name></author><id>searchisko:content:id:jbossorg_blog-what_s_new_in_the_visual_studio_code_xml_extension</id><updated>2019-07-24T13:00:52Z</updated><published>2019-07-24T13:00:52Z</published><content type="html">&lt;p&gt;A new and improved version of the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-xml"&gt;Visual Studio Code XML Extension by Red Hat&lt;/a&gt; has been released under version 0.8.0. This new release brings new features to provide even more support for XSD-related features (the blueprint file of an XML document) along with various performance improvements.&lt;br /&gt; &lt;span id="more-615477"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2 style="text-align: left;"&gt;New Features&lt;/h2&gt; &lt;h4&gt;Jump to opposite tag:&lt;/h4&gt; &lt;p&gt;Sometimes in large documents, the opposite start/end tag can be located off the screen somewhere else, making it difficult to find. Now tags are treated as hyperlinks and, through Ctrl+click, you can now jump around from either the start or end tag to the opposite end.&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter" src="https://user-images.githubusercontent.com/1932211/61671597-a90b7000-ace8-11e9-941d-db6ff37c69ac.gif" width="778" height="296" /&gt;&lt;/p&gt; &lt;h4&gt;CDATA and comment completion:&lt;/h4&gt; &lt;p&gt;You can now easily complete the confusing CDATA block, along with comments.&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter" src="https://user-images.githubusercontent.com/32624665/61798881-15c16000-adf8-11e9-9004-01acf91ca596.gif" /&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3 style="text-align: left;"&gt;XSD-related updates&lt;/h3&gt; &lt;h4&gt;Accurate XSD-based completion:&lt;/h4&gt; &lt;p&gt;Prior to this release when creating an element in either an XML or XSD document the auto-completion suggestions based on XSDs were not always correct. Depending on many constraints such as minOccurs/maxOccurs, if the elements were in a sequence … the provided completion item could be invalid. In version 0.8.0, we now provide only valid elements.&lt;/p&gt; &lt;p&gt;See below where a sequence with 2 elements is declared but only the first one is provided for completion:&lt;/p&gt; &lt;p&gt;&lt;img class="size-medium aligncenter" src="https://media.giphy.com/media/YRE4KpRf3MVKXxNveU/giphy.gif" width="480" height="282" /&gt;&lt;/p&gt; &lt;h4&gt;XML file validation on external XSD changes:&lt;/h4&gt; &lt;p&gt;Originally for XML validation relative to the XSD, validation would only be triggered on an XSD change if it was open/changed internally within the VS Code application. As of this release, the server will track that XSD file externally, detect all changes, and perform the appropriate actions.&lt;/p&gt; &lt;p&gt;The image below shows a validation error on an XML file in VS Code after the XSD it is linked to was changed externally in vim.&lt;/p&gt; &lt;p&gt;&lt;img class="wp-image-615497 aligncenter" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/Screen-Shot-2019-07-22-at-2.04.51-PM-300x99.png" alt="" width="634" height="209" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/Screen-Shot-2019-07-22-at-2.04.51-PM-300x99.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/Screen-Shot-2019-07-22-at-2.04.51-PM-768x253.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/Screen-Shot-2019-07-22-at-2.04.51-PM-1024x337.png 1024w" sizes="(max-width: 634px) 100vw, 634px" /&gt;&lt;/p&gt; &lt;h4&gt;Highlight a specific type in an XSD file:&lt;/h4&gt; &lt;p&gt;In XSD files, you can reference a type, a type defines a specific XML structure that the XML document must follow. This type can be reused and applied to multiple areas in the document, which can lead to type occurrences being used all over the place. With the ability to highlight all references, users can scroll through the document and see all of these references without having to manually search for each use.&lt;/p&gt; &lt;p&gt;&lt;img class="size-medium aligncenter" src="https://user-images.githubusercontent.com/1932211/60190099-5d24f280-9832-11e9-9ac3-2e7a61f01eb8.gif" width="1018" height="385" /&gt;&lt;/p&gt; &lt;h4&gt;Auto-complete types in an XSD file:&lt;/h4&gt; &lt;p&gt;After defining a type, you can start applying it to elements in the XSD file. Normally, you would have to know which types have already been defined and then type it making sure to write it correctly. This auto-complete feature now gathers all existing types and provides them through completion.&lt;/p&gt; &lt;p&gt;&lt;img class="size-medium aligncenter" src="https://media.giphy.com/media/TfiOSZoUKDi13UnMlx/giphy.gif" width="480" height="282" /&gt;&lt;/p&gt; &lt;h4&gt;Jump to the definition of a type:&lt;/h4&gt; &lt;p&gt;If you are in an XSD working with an element that uses a type, you might want to go to the actual definition of it to be able to see its structure. You can now Ctrl+click and go directly to the definition without having to manually search for the definition through all the other implementations.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter" src="https://user-images.githubusercontent.com/1932211/59786268-29444d00-92c7-11e9-9be0-4fbe3f4ff770.gif" width="470" height="395" /&gt;&lt;/p&gt; &lt;h4&gt;Search the references of a type:&lt;/h4&gt; &lt;p&gt;By selecting &lt;em&gt;Find All References&lt;/em&gt;, you can now find all uses of the schema type. Doing so in VS Code will open up a mid-sized window that groups together all references to that type, making it easy to find and read through every use of the type.&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter" src="https://user-images.githubusercontent.com/1932211/60096325-ef54ca00-9750-11e9-8be0-46f1d16e5f11.gif" width="666" height="252" /&gt;&lt;/p&gt; &lt;h4&gt;See the number of references of a type as a CodeLens:&lt;/h4&gt; &lt;p&gt;Similar to the &lt;em&gt;Find All References&lt;/em&gt;, we also provide a CodeLens that is also clickable. This will bring up the same pop-up window from &lt;em&gt;Find All References&lt;/em&gt; as well as show how many there are.&lt;/p&gt; &lt;h4&gt;&lt;img class="size-medium aligncenter" src="https://user-images.githubusercontent.com/32624665/61799091-73ee4300-adf8-11e9-9ec2-f26bc0e8939f.gif" width="800" height="347" /&gt;&lt;/h4&gt; &lt;h4&gt;Jump to the definition of a type from the XML document:&lt;/h4&gt; &lt;p&gt;Similar to the previous ability to go to the type definition from an XSD file, you can also right-click and select &lt;em&gt;Go to Type Definition&lt;/em&gt; to find the type that the XML implementation references. Before you would have to figure out which element is being referenced in the XSD and then find the type definition of that element definition.&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter" src="https://user-images.githubusercontent.com/1932211/61134698-74194500-a4c0-11e9-90bb-6e3bb5825738.gif" width="685" height="223" /&gt;&lt;/p&gt; &lt;h2 style="text-align: left;"&gt;Documentation improvements&lt;/h2&gt; &lt;h4&gt;Documentation from hover and completion is provided as Markdown:&lt;/h4&gt; &lt;p&gt;In an XSD element, documentation can be written to provide some information on that element. XML allows for the use of Markdown or HTML, and when rendering HTML it did not display well with the LSP:&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter" src="https://user-images.githubusercontent.com/148698/49343276-3acc4d00-f634-11e8-9d11-5bbd2d3317a9.png" width="651" height="143" /&gt;&lt;/p&gt; &lt;p&gt;With this release, the following documentation will now be properly displayed in Markdown, resulting in:&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter" src="https://user-images.githubusercontent.com/148698/50027419-2b48ee80-ffba-11e8-98b6-40a2ea24a89a.png" width="658" height="127" /&gt;&lt;/p&gt; &lt;p&gt;Additionally, at the bottom of the description hyperlinks to the connected XSD file are provided:&lt;/p&gt; &lt;p&gt;&lt;img class="size-medium aligncenter" src="https://user-images.githubusercontent.com/1932211/61650563-45ffe600-acb4-11e9-8c76-565ff0180ed1.png" width="930" height="254" /&gt;&lt;/p&gt; &lt;h2 style="text-align: left;"&gt;Performance improvements&lt;/h2&gt; &lt;p&gt;This release had a focus on performance improvements, and we did just that by both decreasing memory usage and improving server speed.&lt;/p&gt; &lt;h4&gt;Speed improvements:&lt;/h4&gt; &lt;p&gt;To get a bit more technical, one improvement to speed was replacing the use of some regular expressions (regex) with hand-crafted java code. In this case, the regex checked for attribute names, but as you can imagine multiple attribute name regex calls during parsing could become a bit taxing. After this change, we noticed a 2-3x speed improvement on large files!&lt;/p&gt; &lt;h4&gt;Document symbols preferences:&lt;/h4&gt; &lt;p&gt;&lt;img class="size-medium aligncenter" src="https://media.giphy.com/media/XeMcJRq26ETKsW2od9/giphy.gif" width="480" height="314" /&gt;&lt;/p&gt; &lt;p&gt;The Language Server Protocol provides a feature known as Document Symbols/Outline. On the left side of the above gif, is the Outline, which has a symbol for each significant piece in the XML document. In a large document, you will have a huge list of these symbols that will most likely be unhelpful because of the sheer amount of them. Whenever something changes in the document, these symbols have to be recalculated, which, as you can imagine for a large document, would be very penalizing.&lt;/p&gt; &lt;p&gt;To account for this, we’ve provided the ability to either selectively disable the Outline for files matched by a pattern or to just disable it completely. Doing so took a huge load off of the CPU and allowed for improved performance with large files.&lt;/p&gt; &lt;h4&gt;Memory improvements:&lt;/h4&gt; &lt;p&gt;Under the hood of the language server, we found some inefficiencies that were causing large hits to the memory; here was one of them.&lt;/p&gt; &lt;p&gt;Normally when a user types, a new copy of the entire document is sent to the server to be processed. As the file grows in size it is easy to see the problem with this method as a user ends up typing multiple characters continuously. Incremental Syncing is a method provided by the &lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;LSP&lt;/a&gt; that allows only the changed characters to be sent to the server to provide the same result with much less data being transferred. So, that’s what we did. In doing so, a large amount of memory was saved since the buffer to hold this data would only have to be enough to hold a few characters at most instead of the entire document.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fwhats-new-in-the-visual-studio-code-xml-extension%2F&amp;#038;title=What%E2%80%99s%20new%20in%20the%20Visual%20Studio%20Code%20XML%20Extension" data-a2a-url="https://developers.redhat.com/blog/2019/07/24/whats-new-in-the-visual-studio-code-xml-extension/" data-a2a-title="What’s new in the Visual Studio Code XML Extension"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/24/whats-new-in-the-visual-studio-code-xml-extension/"&gt;What&amp;#8217;s new in the Visual Studio Code XML Extension&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/AEdExHcuPXQ" height="1" width="1" alt=""/&gt;</content><summary>A new and improved version of the Visual Studio Code XML Extension by Red Hat has been released under version 0.8.0. This new release brings new features to provide even more support for XSD-related features (the blueprint file of an XML document) along with various performance improvements. New Features Jump to opposite tag: Sometimes in large documents, the opposite start/end tag can be located ...</summary><dc:creator>Nikolas Komonen</dc:creator><dc:date>2019-07-24T13:00:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/24/whats-new-in-the-visual-studio-code-xml-extension/</feedburner:origLink></entry><entry><title>Probing golang runtime using SystemTap</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/zxMJ57qGpnQ/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Go" scheme="searchisko:content:tags" /><category term="Golang" scheme="searchisko:content:tags" /><category term="performance" scheme="searchisko:content:tags" /><category term="systemtap" scheme="searchisko:content:tags" /><author><name>Jafeer Uddin</name></author><id>searchisko:content:id:jbossorg_blog-probing_golang_runtime_using_systemtap</id><updated>2019-07-24T07:00:18Z</updated><published>2019-07-24T07:00:18Z</published><content type="html">&lt;p&gt;I recently saw an &lt;a href="https://eng.uber.com/optimizing-m3/"&gt;article from Uber Engineering&lt;/a&gt; describing an issue they were having with an increase in latency. The Uber engineers suspected that their code was running out of stack space causing the golang runtime to issue a stack growth, which would introduce additional latency &lt;span class="author-g-ew4yuqf5p458cil1"&gt;due to memory allocation and copying&lt;/span&gt;. The engineers ended up modifying the golang runtime with additional instrumentation to report these stack growths to confirm their suspicions. This situation is a perfect example of where SystemTap could have been used.&lt;/p&gt; &lt;p&gt;&lt;a href="https://sourceware.org/systemtap/"&gt;SystemTap&lt;/a&gt; is a tool that can be used to perform live analysis of a running program. It is able to interrupt normal control flow and execute code specified by a SystemTap script, which can allow users to temporarily modify a running program without having to change the source and recompile.&lt;span id="more-612097"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Here is a SystemTap script that can be used to replicate the patch done in the Uber article:&lt;/p&gt; &lt;pre&gt;global printstackgrow probe process(&lt;em&gt;PATH&lt;/em&gt;).statement("runtime.newstack@/usr/lib/golang/src/runtime/stack.go:936") { shouldPrintStack = printstackgrow % 1000 == 0 printstackgrow++ if (shouldPrintStack) { oldSize = $thisg-&amp;#62;m-&amp;#62;curg-&amp;#62;stack-&amp;#62;hi - $thisg-&amp;#62;m-&amp;#62;curg-&amp;#62;stack-&amp;#62;lo newSize = oldSize * 2 printf("runtime: newstack: %d -&amp;#62; %d\n", oldSize, newSize) print_ubacktrace_fileline($thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;pc, $thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;sp, $thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;lr) } } &lt;/pre&gt; &lt;p&gt;This script introduces a probe within the &lt;code&gt;runtime.newstack()&lt;/code&gt; function at line 936 of stack.go (this location will depend on your golang installation) for the executable specified by &lt;em&gt;PATH&lt;/em&gt;. When we reach that point in execution, SystemTap will redirect and execute the code placed within the probe handler shown above. The handler performs the same steps done in the Uber article patch, printing out the change in stack size and a backtrace for every 1000 hits of &lt;code&gt;runtime.newstack()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Now let&amp;#8217;s see this script in action. I am going to use the following golang example to demonstrate. This program prints out some text and spawns go routines to do the same, just to get to a point where a stack needs to be grown and &lt;code&gt;runtime.newstack()&lt;/code&gt; is called.&lt;/p&gt; &lt;pre&gt;$ cat example.go package main import ( "fmt" "time" ) func say(s string) { for i := 0; i &amp;#60; 5; i++ { time.Sleep(1 * time.Millisecond) fmt.Println(s) } } func main() { go say("world") say("hello") } &lt;/pre&gt; &lt;p&gt;For this demonstration, I will simplify the SystemTap script a little. The sampling code to limit output isn&amp;#8217;t needed, as there won&amp;#8217;t be too much output with the example. Also now we have an actual executable, generated using &lt;code&gt;go build example.go&lt;/code&gt;, which can be used to replace &lt;em&gt;PATH&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;$ cat newstack.stp probe process("./example").statement("runtime.newstack@/usr/lib/golang/src/runtime/stack.go:936") { oldSize = $thisg-&amp;#62;m-&amp;#62;curg-&amp;#62;stack-&amp;#62;hi - $thisg-&amp;#62;m-&amp;#62;curg-&amp;#62;stack-&amp;#62;lo newSize = oldSize * 2 printf("runtime: newstack: %d -&amp;#62; %d\n", oldSize, newSize) print_ubacktrace_fileline($thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;pc, $thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;sp, $thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;lr) } &lt;/pre&gt; &lt;p&gt;When we run this script, we get:&lt;/p&gt; &lt;pre&gt;$ ls newstack.stp example example.go $ stap newstack.stp &amp;#60;== execute "./example" in another terminal : runtime: newstack: 2048 -&amp;#62; 4096 0x40d748 : runtime.mallocgc+0x548/0x9d0 at /usr/lib/golang/src/runtime/malloc.go:740 [/home/juddin/example] 0x40dd48 : runtime.newobject+0x38/0x60 at /usr/lib/golang/src/runtime/malloc.go:839 [/home/juddin/example] : 0x47c4cb : fmt.Fprintln+0x8b/0x100 at /usr/lib/golang/src/fmt/print.go:255 [/home/juddin/example] 0x47c597 : fmt.Println+0x57/0x90 at /usr/lib/golang/src/fmt/print.go:264 [/home/juddin/example] 0x4827a4 : main.say+0xa4/0xd0 at /home/juddin/example.go:9 [/home/juddin/example] 0x44ecb1 : runtime.goexit+0x1/0x10 at /usr/lib/golang/src/runtime/asm_amd64.s:2362 [/home/juddin/example] &lt;/pre&gt; &lt;p&gt;I have omitted some of the output to make things a little clearer and focused on the points of interest. As can be seen from the backtrace, a stack growth is triggered from &lt;code&gt;main.say()&lt;/code&gt;. So, we are able to determine that our code indeed does cause a stack growth, and we did this without having to modify the target program, never mind the go runtime or compiler.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#038;title=Probing%20golang%20runtime%20using%20SystemTap" data-a2a-url="https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/" data-a2a-title="Probing golang runtime using SystemTap"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/"&gt;Probing golang runtime using SystemTap&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/zxMJ57qGpnQ" height="1" width="1" alt=""/&gt;</content><summary>I recently saw an article from Uber Engineering describing an issue they were having with an increase in latency. The Uber engineers suspected that their code was running out of stack space causing the golang runtime to issue a stack growth, which would introduce additional latency due to memory allocation and copying. The engineers ended up modifying the golang runtime with additional instrumenta...</summary><dc:creator>Jafeer Uddin</dc:creator><dc:date>2019-07-24T07:00:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/</feedburner:origLink></entry><entry><title>The browser wars and the birth of JavaScript</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7wvyH_0VdWw/" /><category term="browser" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="web development" scheme="searchisko:content:tags" /><author><name>Doug Tidwell</name></author><id>searchisko:content:id:jbossorg_blog-the_browser_wars_and_the_birth_of_javascript</id><updated>2019-07-23T13:30:46Z</updated><published>2019-07-23T13:30:46Z</published><content type="html">&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&amp;#8220;Any application that can be written in JavaScript will eventually be written in JavaScript.&amp;#8221;&lt;/em&gt; — Atwood&amp;#8217;s Law, stated by Jeff Atwood in a blog post titled &lt;a href="https://blog.codinghorror.com/the-principle-of-least-power/"&gt;&amp;#8220;The Principle of Least Power,&amp;#8221;&lt;/a&gt; July 17, 2007&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Before anything like an Android device or iPhone existed, desktop computers were the battleground for &lt;a href="https://en.wikipedia.org/wiki/Browser_wars"&gt;the browser wars&lt;/a&gt;. The battle involved billions of dollars invested by a number of companies, all based on the premise that whoever ruled the desktop browser market would own the internet. Today, &lt;a href="https://www.statista.com/statistics/277125/share-of-website-traffic-coming-from-mobile-devices/"&gt;mobile devices account for nearly half of all website traffic.&lt;/a&gt; Back in the 1990s, however, almost all of the action on the web came from desktop machines, and the vast majority of those desktop machines were running some flavor of Microsoft Windows.&lt;/p&gt; &lt;p&gt;In the browser world, the first-mover advantage belonged to Netscape Communications Corporation. They built the Netscape Navigator browser that made the web accessible to millions for the first time. Netscape had more than 80% of the market, but they also had no shortage of competition. IBM had a browser for OS/2. Oracle had the Powerbrowser, a Netscape-compatible product that included something called the Database Markup Language. The real danger to Netscape, of course, came from the company that owned more than 80% of the world&amp;#8217;s desktops: Microsoft.&lt;/p&gt; &lt;p&gt;Strategically, Netscape realized that the web needed to move past static web pages to reach its full potential. Even if they were created dynamically by something like a CGI script on the web server, pages didn&amp;#8217;t change once they arrived in your browser. If you wanted to see even a slightly modified version of a page, you had to send a request back to the server and wait for a response. For all its sophistication, a web browser felt a lot like a dumb terminal attached to a mainframe. What web developers needed was a programming language that would run in the browser, taking advantage of the processing power of the desktop machine to give users a richer experience.&lt;/p&gt; &lt;p&gt;&lt;span id="more-608607"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;So in 1995, hearing footsteps from Redmond, Netscape decided to shoot for the moon and create that language. Netscape CEO Jim Clark had brought in a gifted programmer named Brendan Eich, who arrived with the idea of implementing the programming language Scheme in the browser. Scheme was adored in academia, but didn&amp;#8217;t have much traction in the marketplace. Eich thought it might be a good fit for programming web pages. He later referred to Scheme as &amp;#8220;that beautiful research language I was tempted with.&amp;#8221;&lt;/p&gt; &lt;p&gt;Only there was a complication: Netscape had licensed Java from Sun Microsystems. A commonly held opinion was that Java should be the language of the browser. Unfortunately, Java was too heavy for the slow connections most people had in those days. Developers had to compile their code and then deliver that code to the browser. Good luck if your code needed a different version of Java than the one the user had on their machine. This meant they needed the patience to download a Java Virtual Machine that was 10 MB or more (!) across a connection too slow for many of today&amp;#8217;s users to comprehend. Back then, the web page and whatever non-Java content it contained were probably no more than a couple hundred KB; there was just too much overhead for Java to work.&lt;/p&gt; &lt;p&gt;In contrast, &lt;a href="https://thenewstack.io/brendan-eich-on-creating-javascript-in-10-days-and-what-hed-do-differently-today/"&gt;Eich, Netscape&amp;#8217;s Marc Andreessen, and Sun&amp;#8217;s Bill Joy all agreed that the world needed a BASIC-like language&lt;/a&gt; that would be a good fit for people who didn&amp;#8217;t know what a compiler was. Should anyone creating a web page have to understand what &lt;code&gt;public static void main(String[] args)&lt;/code&gt; means? Eich didn&amp;#8217;t think so.&lt;/p&gt; &lt;p&gt;The decision was made to create a new programming language and to release that new programming language in Netscape Navigator 2.0. That decision was made &lt;strong&gt;Ten. Days. Before. Launch.&lt;/strong&gt; Eich spent those 10 days creating LiveScript, later renamed JavaScript. (As he said years later, &amp;#8220;I didn&amp;#8217;t sleep much.&amp;#8221;) Suddenly, developers could add logic to their web pages. Even better, the language was directly tied into the things web developers wanted to work with, including the Document Object Model (DOM) for a page&amp;#8217;s HTML content and objects like the browser window itself. If you wanted to go through the page&amp;#8217;s document structure and work with it, JavaScript could do that easily. If you wanted to resize or move a window or open a new window altogether, JavaScript could do that easily.&lt;/p&gt; &lt;h2&gt;&lt;code&gt;&amp;#60;!--[if !IE]&amp;#62;&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;On a personal note, a story from the International House of Hubris: in March of 1996, I was in San Francisco for &lt;a href="https://www.latimes.com/archives/la-xpm-1996-03-07-fi-44130-story.html"&gt;the first Netscape Developers Conference&lt;/a&gt;. I don&amp;#8217;t remember the name of the young, &lt;a href="https://www.zegna.us/us-en/home.html"&gt;Zegna&lt;/a&gt;-clad millionaire who said it, but he told the audience that you could write for Netscape Navigator&amp;#8230;and if you wanted the other three percent of the web, you could target Internet Explorer. Much snickering ensued.&lt;/p&gt; &lt;p&gt;&lt;code&gt;&amp;#60;![endif]--&amp;#62;&lt;/code&gt;&lt;/p&gt; &lt;h2&gt;&lt;code&gt;&amp;#60;!--[if IE]&amp;#62;&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;The following week, I stayed in San Francisco to attend the Microsoft Professional Developers Conference, the show where Bill Gates and company finally understood the internet. If you have some time to kill, &lt;a href="https://channel9.msdn.com/Events/PDC/PDC-1996/PDC-1996-Keynote-with-Bill-Gates"&gt;watch Gates&amp;#8217; keynote. Seriously. It changed the world we live in.&lt;/a&gt; The keynote included demos of games, virtual reality, and state-of-the-art web design, all of which look hilarious now. There was also a demo that ended with the Blue Screen of Death in front of thousands of people; however, that doesn&amp;#8217;t seem to be in the archives. (No judgment, we&amp;#8217;re all programmers, we&amp;#8217;ve all been there. Although maybe not in front of thousands of people while our boss, a.k.a. the richest man in the history of money, looked on.)&lt;/p&gt; &lt;p&gt;At the show, Microsoft announced a full-out pivot to make everything in their product line internet-enabled in one way or another. This was an escalation of their ongoing attacks on Netscape&amp;#8217;s business model. In late 1996, &lt;a href="https://www.fastcompany.com/27743/nothing-netscape"&gt;Netscape Navigator still had 80% of the market and a list price of $49&lt;/a&gt;. (Yes, you had to pay money to get a browser. Talk to your grandparents about what it was like back then. Also, ask them about something called &amp;#8220;dialup.&amp;#8221;) Not only was Windows going to contain a free web browser, but Microsoft was giving away a web &lt;em&gt;server&lt;/em&gt; as well. Unfortunately, it turned out Internet Explorer wasn&amp;#8217;t &lt;em&gt;quite&lt;/em&gt; compatible with Netscape and other browsers to come, creating a thorn in the side of every web developer on Earth for the next 15 years or more.&lt;/p&gt; &lt;p&gt;At any rate, I left San Francisco convinced that Netscape had no idea what was about to hit them. I was also convinced that &lt;a href="https://www.virtual-bubblewrap.com"&gt;Virtual Bubble Wrap&lt;/a&gt;, a Flash-based game that ran in Netscape Navigator, was the greatest use of the Internet ever. I believe I was right on both counts.&lt;/p&gt; &lt;p&gt;&lt;code&gt;&amp;#60;![endif]--&amp;#62;&lt;/code&gt;&lt;/p&gt; &lt;h2&gt;The little language that could&lt;/h2&gt; &lt;p&gt;So, why are we still talking about JavaScript 20+ years later? First, it became a hit on the client side. In 1996, if you were a web developer who wanted to write an interactive web page, you had to learn JavaScript. In 2019, if you&amp;#8217;re a web developer who wants to write an interactive web page, you have to learn JavaScript. Innovation didn&amp;#8217;t stop with the first scripted web pages of the mid-90s, however.&lt;/p&gt; &lt;p&gt;JavaScript&amp;#8217;s influence became more apparent as applications like &lt;a href="https://www.google.com/maps/place/Red+Hat+Tower,+Raleigh,+NC+27601/@35.7745506,-78.640112,17z/data=!3m1!4b1!4m5!3m4!1s0x89ac5f73ad02be6d:0x274dbfebac50d01f!8m2!3d35.7745506!4d-78.6379233"&gt;Google Maps&lt;/a&gt; established a whole new level of interactivity. At one time, mapping websites showed you a static view of the world. If you wanted to see another portion of the map (zoom out, zoom in, move north/west/south/east, etc.), you clicked a button and waited for the server to show you a different map. Google Maps, on the other hand, used JavaScript to prefetch other parts of the map that you might want to see. If you scrolled in one direction or another, the map displayed instantly and automatically. Static maps that required a round-trip to the server every time you wanted to move around were quickly abandoned.&lt;/p&gt; &lt;p&gt;JavaScript&amp;#8217;s dominance was cemented by the emergence of &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; on the server side. At a minimum, it gave web developers the ability to take their JavaScript skills from the client to the server. Combined with the ability to pass functions as objects (callbacks), Node.js&amp;#8217;s event loop popularized a whole new programming model. Suddenly, you could write a web server in just a few lines of code.&lt;/p&gt; &lt;p&gt;Then, the rise of the &lt;a href="https://www.npmjs.com"&gt;Node Package Manager (npm)&lt;/a&gt; to manage dependencies meant a very small application could leverage other packages to do really sophisticated things. As a self-serving example, &lt;a href="https://github.com/redhat-developer-demos/knative-proxy"&gt;the knative-proxy package&lt;/a&gt; in &lt;a href="https://developers.redhat.com/coderland/serverless/"&gt;the Coderland Compile Driver&lt;/a&gt; needs fewer than 40 lines of code to handle the HTTP POST and OPTIONS verbs. And it took yr author maybe 30 minutes to write.&lt;/p&gt; &lt;p&gt;JavaScript is a simple, unpretentious language that has its fingers in every corner of your life. Turn off JavaScript in your browser and see how much of the web doesn&amp;#8217;t work anymore. (Philosophical arguments as to whether that&amp;#8217;s a good or bad thing are left to the reader.) No matter how or where you use the internet, Brendan Eich&amp;#8217;s 10-day coding spree is the most important sprint in the history of computing. You don&amp;#8217;t have to like JavaScript, but if you make a living developing for the web, you have to learn it.&lt;/p&gt; &lt;p&gt;To learn more, tune in to &lt;a href="https://www.redhat.com/en/command-line-heroes/season-3/creating-javascript"&gt;Command-line Heroes Season 3, Episode 3: Creating JavaScript&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#038;title=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" data-a2a-url="https://developers.redhat.com/blog/2019/07/23/the-browser-wars-and-the-birth-of-javascript/" data-a2a-title="The browser wars and the birth of JavaScript"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/23/the-browser-wars-and-the-birth-of-javascript/"&gt;The browser wars and the birth of JavaScript&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7wvyH_0VdWw" height="1" width="1" alt=""/&gt;</content><summary>“Any application that can be written in JavaScript will eventually be written in JavaScript.” — Atwood’s Law, stated by Jeff Atwood in a blog post titled “The Principle of Least Power,” July 17, 2007 Before anything like an Android device or iPhone existed, desktop computers were the battleground for the browser wars. The battle involved billions of dollars invested by a number of companies, all b...</summary><dc:creator>Doug Tidwell</dc:creator><dc:date>2019-07-23T13:30:46Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/23/the-browser-wars-and-the-birth-of-javascript/</feedburner:origLink></entry><entry><title>DevNation Live: Introducing Kogito</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xNY06T4Ygys/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="GraalVM" scheme="searchisko:content:tags" /><category term="kogito" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><author><name>Editorial Team</name></author><id>searchisko:content:id:jbossorg_blog-devnation_live_introducing_kogito</id><updated>2019-07-23T07:00:05Z</updated><published>2019-07-23T07:00:05Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/devnation/"&gt;DevNation Live tech talks&lt;/a&gt; are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, you’ll learn about &lt;a href="https://developers.redhat.com/courses/quarkus/"&gt;Quarkus&lt;/a&gt;, &lt;a href="https://quarkus.io/guides/kogito-guide"&gt;Kogito&lt;/a&gt;, and &lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt; from Red Hat&amp;#8217;s &lt;a href="https://developers.redhat.com/blog/author/mfusco/"&gt;Mario Fusco,&lt;/a&gt; Principal Software Engineer, and &lt;a href="https://developers.redhat.com/node/204405/"&gt;Burr Sutter&lt;/a&gt;, Chief Developer Evangelist.&lt;/p&gt; &lt;p&gt;These days rule engines are often overlooked, possibly because people think that they are only useful inside heavyweight enterprise software products. However, this is not necessarily true. Simply put, a rule engine is just a piece of software that allows you to separate domain and business-specific constraints from the main application flow. Drools is the rule engine of Red Hat, and our goal is to make it ready to be used in serverless environments.&lt;/p&gt; &lt;p&gt;This talk will explore and make sense of technologies like GraalVM and Quarkus. We&amp;#8217;ll show what changes are needed in a codebase — making extensive use of reflection, dynamic class loading, and other Java sorceries — to make it compatible with those technologies, and we&amp;#8217;ll demonstrate how this is allowing us to make Drools part of the cloud and serverless revolution.&lt;/p&gt; &lt;p&gt;Watch the complete talk here:&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/tLz_aNLuCR0" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Join us at an upcoming&lt;a href="https://developers.redhat.com/events/"&gt; developer event&lt;/a&gt;, and see our collection of&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt; past DevNation Live tech talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#038;title=DevNation%20Live%3A%20Introducing%20Kogito" data-a2a-url="https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/" data-a2a-title="DevNation Live: Introducing Kogito"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/"&gt;DevNation Live: Introducing Kogito&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xNY06T4Ygys" height="1" width="1" alt=""/&gt;</content><summary>DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, you’ll learn about Quarkus, Kogito, and GraalVM from Red Hat’s Mario Fusco, Principal Software Engineer, and Burr Sutter, Chief Developer Evangelist. These days rule engines are often overlooked, possibl...</summary><dc:creator>Editorial Team</dc:creator><dc:date>2019-07-23T07:00:05Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/</feedburner:origLink></entry><entry><title>Enabling CI/CD for Red Hat Decision Manager on OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2x0k0p9Ms2o/" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="OpenShift Enterprise by Red Hat" scheme="searchisko:content:tags" /><category term="Red Hat Decision Manager" scheme="searchisko:content:tags" /><author><name>chgan</name></author><id>searchisko:content:id:jbossorg_blog-enabling_ci_cd_for_red_hat_decision_manager_on_openshift</id><updated>2019-07-22T07:00:53Z</updated><published>2019-07-22T07:00:53Z</published><content type="html">&lt;p&gt;As part of the microservices adoption journey, there will come a time when an organization starts to implement more and more rules services as part of the total application solution landscape. There could be hundreds of rules services to be managed and deployed at one time, making the job of the application team more challenging and eventually causing delays to the entire production rollout.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/red-hat-decision-manager/overview"&gt;Red Hat Decision Manager&lt;/a&gt; (RHDM) is a solution that enables developers and application teams to implement decision services or business rules for their application needs. I will be covering how we can fully utilize the capabilities brought by Red Hat Decision Manager and &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; to enable a smooth CI/CD process, in order to have rapid decision services deployment. (This tutorial assumes you already have a good understanding of RHDM and OpenShift.)&lt;span id="more-608707"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;All the steps outlined here can be found &lt;a href="https://github.com/chengkuangan/travel-insurance-rules"&gt;in the demo that I have created in GitHub&lt;/a&gt;. The demo is based on simple travel insurance business rules. If you do not wish to follow the steps here, you can proceed to GitHub to use the scripts to deploy the demo. Please be aware that the GitHub content may change over time as I continue to enhance the demo.&lt;/p&gt; &lt;h2&gt;Overview of architecture&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s take a quick look at the architecture that we&amp;#8217;ll cover in this article. Bear in mind that this is one of the many possibilities of how you can deploy the RHDM on OpenShift. As you can see from the diagram, Decision Central and Decision Manager are deployed into the DEV environment, while only Decision Manager is deployed into SIT, UAT, and PROD. Decision Central is not needed in those environments because we can easily deploy the changes of decision services in those environments using the CI/CD process.&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-cicd-architecture/'&gt;&lt;img width="2440" height="1616" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-cicd-architecture.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-cicd-architecture.png 2440w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-cicd-architecture-300x199.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-cicd-architecture-768x509.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-cicd-architecture-1024x678.png 1024w" sizes="(max-width: 2440px) 100vw, 2440px" /&gt;&lt;/a&gt; &lt;p&gt;Rules Designers or Rules Developers access Decision Central in the DEV environment to develop or make changes to the business rules. Changes can be deployed and tested in the kie-server in the DEV environment. When it is decided that the changes are good to go from DEV into the SIT, Jenkins pipelines are used to build the kjar and deploy it into the Decision Server in the SIT environment. A Nexus repository is also configured as maven repo for the kjar and container build.&lt;/p&gt; &lt;p&gt;In this article, to keep the demonstration simple, the changes from Decision Central are pushed directly into the Gogs server. A configured Git Hook will do a curl POST to invoke Jenkins job to build the kjar using pipelines, deploy kjar into Nexus, and then deploy the kjar from Nexus into OpenShift SIT Environment. I believe this is enough to provide a good start for anyone who&amp;#8217;d like to set up a similar environment, even extended to UAT and PROD environments.&lt;/p&gt; &lt;p&gt;In a real-life environment, you may also consider having a separate container repository to store the ready-built golden copy of the container image. That way, you can always refer to this golden container image for deployment to multiple environments including the production environment. One of such container image repository is &lt;a href="https://www.openshift.com/products/quay"&gt;Red Hat Quay&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Preparing our environments on OpenShift&lt;/h2&gt; &lt;p&gt;Before deploying the RHDM, be ensure the RHDM image stream is available on OpenShift. Log in as cluster-admin and validate the imagestreams by running the following commands. If the image streams are not available on OpenShift, please follow &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.3/html/deploying_a_red_hat_decision_manager_authoring_or_managed_server_environment_on_red_hat_openshift_container_platform/dm-openshift-prepare-con#imagestreams-file-install-proc"&gt;these instructions on how to configure it&lt;/a&gt;. You may have a different image streams version tag in your environment; please take note to make the necessary changes in the steps outlined here.&lt;/p&gt; &lt;pre&gt;oc get imagestreamtag -n openshift | grep rhdm73-decisioncentral-openshift oc get imagestreamtag -n openshift | grep rhdm73-kieserver-openshift&lt;/pre&gt; &lt;p&gt;We are creating three OpenShift projects to represent the different environments. In this example, we will create a project called Tools to group the Jenkins, Nexus, and Gogs containers—a separate project each for DM DEV and DM SIT.&lt;/p&gt; &lt;pre&gt;oc new-project rhdm-tools --display-name="Tools" oc new-project rhdm-sit --display-name="DM SIT" oc new-project rhdm-dev --display-name="DM DEV" &lt;/pre&gt; &lt;p&gt;At the later part, when we are using the Jenkins pipelines to deploy the kjar using the kie-server template into SIT environment, this kie-server template will create necessary rolebindings on top of many other OpenShift components. In order for Jenkins to be able to provision kie-server in the SIT environment, we need to ensure the Jenkins has the proper permissions. Run the following commands to create the necessary permissions for Jenkins. You may receive this notification: &lt;em&gt;&amp;#8220;&lt;span class="s1"&gt;Warning: ServiceAccount &amp;#8216;jenkins&amp;#8217; not found,&lt;/span&gt;&amp;#8221; &lt;/em&gt;which can be ignored at the moment.&lt;/p&gt; &lt;pre&gt;oc create role RoleBindingRbacCreate --verb=create --resource=rolebindings.rbac.authorization.k8s.io -n rhdm-sit oc create role RoleBindingCreate --verb=create --resource=rolebindings.authorization.openshift.io -n rhdm-sit oc policy add-role-to-user edit system:serviceaccount:rhdm-tools:jenkins -n rhdm-sit oc policy add-role-to-user edit system:serviceaccount:rhdm-tools:jenkins -n rhdm-sit oc adm policy add-role-to-user RoleBindingRbacCreate system:serviceaccountrhdm-tools:jenkins --role-namespace=rhdm-sit -n rhdm-sit oc adm policy add-role-to-user RoleBindingCreate system:serviceaccount:rhdm-tools:jenkins --role-namespace=rhdm-sit -n rhdm-sit &lt;/pre&gt; &lt;h3&gt;Deploying Gogs container and preparing the demo data&lt;/h3&gt; &lt;p&gt;Next, we are creating the Gogs container in the Tools project.&lt;/p&gt; &lt;pre&gt;oc new-app -f https://raw.githubusercontent.com/chengkuangan/templates/master/gogs-persistent-template.yaml -p SKIP_TLS_VERIFY=true -n rhdm-tools&lt;/pre&gt; &lt;p&gt;Wait for the Gogs container to be ready. Navigate to the Gogs console, create a new user, and perform the next few commands.&lt;/p&gt; &lt;p&gt;We will use the sample project from the &lt;a href="https://github.com/chengkuangan/travel-insurance-rules"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;git clone --bare https://github.com/chengkuangan/travel-insurance-rules.git cd travel-insurance-rules.git&lt;/pre&gt; &lt;p&gt;Create a token so that you can use the token to create the Gogs repo using the command line. Please change the &lt;code&gt;${GOGUSER},  ${GOGSPASSWORD}, ${GOGD_HOSTNAME}&lt;/code&gt; accordingly.&lt;/p&gt; &lt;pre&gt;curl -X POST -H "content-type: application/json" -d '{"name":"sample-token","sha1":"8a4fc41b4868aecdd623b10cb1b64a36c6ee51f3"}' 'http://${GOGSUSER}:${GOGSPASSWORD}@${GOGS_HOSTNAME}/api/v1/users/${GOGSUSER}/tokens' &lt;/pre&gt; &lt;p&gt;Use the token created in the previous step to create the necessary repository. Please change the &lt;code&gt;${GOGUSER},  ${GOGSPASSWORD}, ${GOGD_HOSTNAME}&lt;/code&gt; accordingly.&lt;/p&gt; &lt;pre&gt;curl -H "Content-Type: application/json" -d '{"name": "travel-insurance-rules", "description": "Travel Insurance Rules Demo", "private": false}' -X POST 'http://${GOGSUSER}:${GOGSPASSWORD}@${GOGS_HOSTNAME}/api/v1/user/repos?token=8a4fc41b4868aecdd623b10cb1b64a36c6ee51f3'&lt;/pre&gt; &lt;p&gt;Make sure you are in the local &lt;code&gt;travel-insurance-rules.git&lt;/code&gt; directory. Push the sample codes into the Gogs repository. Please change the &lt;code&gt;${GOGUSER},  ${GOGSPASSWORD}, ${GOGD_HOSTNAME}&lt;/code&gt; accordingly.&lt;/p&gt; &lt;pre&gt;git push --mirror 'http://${GOGSUSER}:${GOGSPASSWORD}@${GOGS_HOSTNAME}/${GOGSUSER}/travel-insurance-rules.git'&lt;/pre&gt; &lt;p&gt;Remove the git directory.&lt;/p&gt; &lt;pre&gt;cd .. rm -rf travel-insurance-rules.git&lt;/pre&gt; &lt;p&gt;Now, we&amp;#8217;ll clone the repository from Gogs repository that we just created, because we need to make some changes for the demo to work. You can just head directly to the Gogs console to do this; however, I find using commands is better. Please change the &lt;code&gt;${GOGUSER},  ${GOGSPASSWORD}, ${GOGD_HOSTNAME}&lt;/code&gt;, &lt;code&gt;${PROJECTNAME}&lt;/code&gt; accordingly. Here, &lt;code&gt;${PROJECTNAME}&lt;/code&gt; refers to the project where the Nexus is deployed, e.g., &lt;code&gt;rhdm-tools&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;git clone http://${GOGS_HOSTNAME}/${GOGSUSER}/travel-insurance-rules.git cd travel-insurance-rules sed -i -e "s/http:\/\/nexus3.demo1-tools.svc.cluster.local/http:\/\/nexus3.${PROJECTNAME}.svc.cluster.local/g" ./Jenkinsfile sed -i -e "s/http:\/\/nexus3.demo1-tools.svc.cluster.local/http:\/\/nexus3.${PROJECTNAME}.svc.cluster.local/g" ./openshift-nexus-settings.xml git add . git commit -m "Updated Jenkinsfile" git push 'http://${GOGSUSER}:${GOGSPASSWORD}@${GOGS_HOSTNAME}/${GOGSUSER}/travel-insurance-rules.git' cd .. rm -rf travel-insurance-rules&lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-gogs-repo-3/'&gt;&lt;img width="2364" height="1760" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-repo-2.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-repo-2.png 2364w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-repo-2-300x223.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-repo-2-768x572.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-repo-2-1024x762.png 1024w" sizes="(max-width: 2364px) 100vw, 2364px" /&gt;&lt;/a&gt; &lt;h3 id="pzgzoBT"&gt;Provisioning Nexus 3&lt;/h3&gt; &lt;p&gt;The next step is to deploy the Nexus container.&lt;/p&gt; &lt;pre&gt;oc new-app -f https://raw.githubusercontent.com/chengkuangan/templates/master/nexus3-persistent-templates.yaml -n rhdm-tools&lt;/pre&gt; &lt;p&gt;Wait for the Nexus container to be ready, which will take some time. Run the following command to create the necessary repo in the Nexus. Please replace the &lt;code&gt;${NEXUS_HOSTNAME}&lt;/code&gt; accordingly, e.g., http://nexus3-rhdm-tools.apps.ocp.demo.com.&lt;/p&gt; &lt;pre&gt;curl -o /tmp/nexus-functions -s https://raw.githubusercontent.com/chengkuangan/scripts/master/configure_nexus3_repo.sh; source /tmp/nexus-functions admin admin123 http://${NEXUS_HOSTNAME}&lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-nexus-repos/'&gt;&lt;img width="1776" height="950" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-nexus-repos.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-nexus-repos.png 1776w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-nexus-repos-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-nexus-repos-768x411.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-nexus-repos-1024x548.png 1024w" sizes="(max-width: 1776px) 100vw, 1776px" /&gt;&lt;/a&gt; &lt;h3&gt;Provision Jenkins&lt;/h3&gt; &lt;p&gt;Next, deploy the Jenkins container.&lt;/p&gt; &lt;pre&gt;oc new-app jenkins-persistent -n rhdm-tools&lt;/pre&gt; &lt;p&gt;Wait for the container to be ready. Then, log in to Jenkins with OpenShift user and accept the default permission prompt. Once you are in, create a new token and take note of this token; we will be using it in the next command to create the Jenkins job. Keep this token safe as you will not be able to retrieve it from Jenkins again.&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-jenkins-token/'&gt;&lt;img width="2062" height="470" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-token.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-token.png 2062w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-token-300x68.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-token-768x175.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-token-1024x233.png 1024w" sizes="(max-width: 2062px) 100vw, 2062px" /&gt;&lt;/a&gt; &lt;p&gt;Run the following commands to create a Jenkins job and populate the correct settings. Remember to use the correct values according to your environment for &lt;code&gt;${PROJECTNAME}, ${DOMAIN_NAME}, ${GOGUSER}, ${JENKINS_USERNAME}, ${JENKINS_TOKEN}&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;curl -k https://jenkins-${PROJECTNAME}.${DOMAIN_NAME}/jnlpJars/jenkins-cli.jar --output /tmp/jenkins-cli.jar curl -k https://raw.githubusercontent.com/chengkuangan/travel-insurance-rules/master/templates/jenkins-job.xml --output /tmp/jenkins-job-work.xml sed -i -e "s/https:\/\/github.com\/chengkuangan\/travel-insurance-rules.git/http:\/\/gogs:3000\/${GOGSUSER}\/travel-insurance-rules.git/g" /tmp/jenkins-job-work.xml java -jar /tmp/jenkins-cli.jar -s https://jenkins-${PROJECTNAME}.${DOMAIN_NAME}/ -noCertificateCheck -auth ${JENKINS_USERNAME}:${JENKINS_TOKEN}  create-job travel-insurance-rules &amp;#60; /tmp/jenkins-job-work.xml &lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-jenkins-job/'&gt;&lt;img width="1656" height="766" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-job.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-job.png 1656w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-job-300x139.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-job-768x355.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-job-1024x474.png 1024w" sizes="(max-width: 1656px) 100vw, 1656px" /&gt;&lt;/a&gt; &lt;h3&gt;Deploying kie-server and Decision Central in DEV environment&lt;/h3&gt; &lt;p&gt;Create the keystore required to deploy the kie-server and Decision Central. To make this tutorial simple, I am using one keystore for both kie-server and Decision Central. For production, it is recommended to use a separate keystore and more secure password.&lt;/p&gt; &lt;pre&gt;keytool -genkeypair -alias jboss -keyalg RSA -keystore ./keystore.jks -storepass mykeystorepass --dname 'CN=demo1,OU=Demo,O=ocp.demo.com,L=KL,S=KL,C=MY'&lt;/pre&gt; &lt;p&gt;Create the secrets for kie-server and Decision Central.&lt;/p&gt; &lt;pre&gt;oc create secret generic kieserver-app-secret --from-file=./keystore.jks -n rhdm-dev oc create secret generic decisioncentral-app-secret --from-file=./keystore.jks -n rhdm-dev&lt;/pre&gt; &lt;p&gt;Deploy the kie-server and Decision Central using the authoring templates. You can obtain the template from the &lt;a href="https://access.redhat.com/downloads"&gt;Red Hat Product download site&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Note that I also pass in the &lt;code&gt;GIT_HOOKS_DIR&lt;/code&gt; parameter at the &lt;code&gt;oc new-app&lt;/code&gt; command. This denotes the directory for the Git hook that we are going to create later to make sure whenever changes made to Decision Central project files will be pushed automatically to Gogs repo. Remember to replace the value for &lt;code&gt;$KIESERVER_KEYSTORE_PASSWORD&lt;/code&gt; and &lt;code&gt;$PROJ_DM_DEV_NAME&lt;/code&gt; at the command-line parameter.&lt;/p&gt; &lt;pre&gt;oc new-app -f https://raw.githubusercontent.com/chengkuangan/travel-insurance-rules/master/templates/rhdm73-authoring.yaml -p DECISION_CENTRAL_HTTPS_SECRET=decisioncentral-app-secret -p KIE_SERVER_HTTPS_SECRET=kieserver-app-secret -p DECISION_CENTRAL_HTTPS_PASSWORD=$KIESERVER_KEYSTORE_PASSWORD -p KIE_SERVER_HTTPS_PASSWORD=$KIESERVER_KEYSTORE_PASSWORD -p APPLICATION_NAME=dmanager -p IMAGE_STREAM_TAG=1.1 -p GIT_HOOKS_DIR=/opt/eap/standalone/data/kie/hooks&lt;em&gt; -n $PROJ_DM_DEV_NAME&lt;/em&gt;&lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-dev-containers/'&gt;&lt;img width="3202" height="648" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dev-containers.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dev-containers.png 3202w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dev-containers-300x61.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dev-containers-768x155.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dev-containers-1024x207.png 1024w" sizes="(max-width: 3202px) 100vw, 3202px" /&gt;&lt;/a&gt; &lt;p&gt;You may noticed that I have a persistent volume created using the template. This is not default in the RHDM authoring template that is downloaded from the Red Hat website. This is required and useful when we import and create ssh keys, ssh &lt;code&gt;config&lt;/code&gt;, and ssh &lt;code&gt;known_hosts&lt;/code&gt; files into the Decision Central POD later.&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-dc-pv-ssh/'&gt;&lt;img width="1018" height="308" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-pv-ssh.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-pv-ssh.png 1018w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-pv-ssh-300x91.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-pv-ssh-768x232.png 768w" sizes="(max-width: 1018px) 100vw, 1018px" /&gt;&lt;/a&gt; &lt;h2&gt;Complete the CI/CD process&lt;/h2&gt; &lt;h3&gt;Configure Gogs&lt;/h3&gt; &lt;p&gt;For demonstration purposes, I will just configure the post-receive Git hook at Gogs repo settings.  It is just a simple curl POST to the Jenkins job to start the Jenkins build whenever there is a code change in the Gogs repository, submitted by Decision Central. In real-life environment, you may want to do a more complete script to call the Jenkins job build based on different situation, or you may want to just use the built-in Webhooks.&lt;/p&gt; &lt;p&gt;The following is the curl command used in &lt;code&gt;post-receive&lt;/code&gt; Git hook. Notice that this is the same Jenkins user that we used earlier with the created token. Replace the Jenkins hostname as needed for your actual environment. Change the user and token according to your environment.&lt;/p&gt; &lt;pre&gt;#!/bin/bash curl -k -X POST --user demo1-admin-edit-view:&amp;#60;token&amp;#62; https://jenkins-demo1-tools.apps.3.1.190.191.nip.io/job/travel-insurance-rules/build&lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-gogs-githook/'&gt;&lt;img width="2336" height="1336" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-githook.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-githook.png 2336w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-githook-300x172.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-githook-768x439.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-githook-1024x586.png 1024w" sizes="(max-width: 2336px) 100vw, 2336px" /&gt;&lt;/a&gt; &lt;p&gt;Create an ssh key with the following command and ensure the email is matching the email from the Gogs user. Use an empty password. Then, add the public key (id_rsa.pub) into Gogs. Remember to create these keys on a different directory to avoid overwriting your existing keys.&lt;/p&gt; &lt;pre&gt;ssh-keygen -t rsa -C "myeamil@email.com" -N ""&lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-gogs-sshkeys/'&gt;&lt;img width="2364" height="1502" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-sshkeys.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-sshkeys.png 2364w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-sshkeys-300x191.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-sshkeys-768x488.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-sshkeys-1024x651.png 1024w" sizes="(max-width: 2364px) 100vw, 2364px" /&gt;&lt;/a&gt; &lt;h3&gt;Configure Decision Central&lt;/h3&gt; &lt;p&gt;For Decision Central to be able to pull and push project changes to Gogs, we need to transfer the private key (&lt;code&gt;id_rsa&lt;/code&gt;) created earlier,  ssh &lt;code&gt;config&lt;/code&gt; file and create an ssh &lt;code&gt;known_hosts&lt;/code&gt; file in the container&amp;#8217;s &lt;code&gt;/home/jboss/.ssh&lt;/code&gt; directory. With the PV that we created earlier using the modified RHDM authoring templates, this allows write access to known_hosts file, and persistency of these ssh related files.&lt;/p&gt; &lt;p&gt;Next, &lt;code&gt;oc rsh&lt;/code&gt; into the Decision Central container to create file &lt;code&gt;/home/jboss/.ssh/config&lt;/code&gt; with the following content (with 644 file permission). Make sure the host and hostname match the svc for the NodePort that we created earlier. Replace the other values to match your own environment. You can create this file outside the POD and use the &lt;code&gt;oc cp&lt;/code&gt; command to copy it into the POD.&lt;/p&gt; &lt;pre&gt;Host gogs-ssh.demo1-tools.svc.cluster.local Hostname gogs-ssh.demo1-tools.svc.cluster.local User demo1 Port 1025 IdentityFile ~/.ssh/id_rsa&lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-gogs-ssh-nodeport/'&gt;&lt;img width="300" height="92" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-ssh-nodeport-300x92.png" class="attachment-medium size-medium" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-ssh-nodeport-300x92.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-ssh-nodeport-768x235.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-ssh-nodeport-1024x314.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/a&gt; &lt;p&gt;Copy the ssh private key (id_rsa) file into &lt;code&gt;/home/jboss/.ssh&lt;/code&gt;, make sure it has file permission 600. You can use &lt;code&gt;oc cp&lt;/code&gt; command to do this.&lt;/p&gt; &lt;p&gt;Create an empty &lt;code&gt;known_hosts&lt;/code&gt; by running the following command in the POD. You can also use the &lt;code&gt;oc exec&lt;/code&gt; command to do this.&lt;/p&gt; &lt;pre&gt;touch /home/jboss/.ssh/known_hosts&lt;/pre&gt; &lt;p&gt;Next, &lt;code&gt;oc rsh&lt;/code&gt; into the Decision Central POD and test the ssh connection to Gogs with the following command. You will be prompted to accept and trust the hostname. It is&lt;em&gt; important&lt;/em&gt; to do this; otherwise, when you modified the project files on Decision Central console, the attempt to save the changes will fail at the backend with the error message &lt;em&gt;&amp;#8220;Host key verification failed&amp;#8221;&lt;/em&gt; thrown at Decision Central server logs.&lt;/p&gt; &lt;pre&gt;ssh -vT gogs-ssh.rhdm-tools.svc.cluster.local&lt;/pre&gt; &lt;p&gt;Navigate into &lt;code&gt;/opt/eap/standalone/data/kie/hooks&lt;/code&gt;. Create a file named &lt;code&gt;post-commit&lt;/code&gt; with 755 file permission. The &lt;code&gt;post-commit&lt;/code&gt; file contains only one line as per the following. The location of this file is the parameter that we used for &lt;code&gt;GIT_HOOKS_DIR&lt;/code&gt; when we created the containers using the RHDM authoring templates.&lt;/p&gt; &lt;pre&gt;git push&lt;/pre&gt; &lt;p&gt;Because we did not change the default adminUser and password in the templates, we need to navigate to the Decision Manager deployment config to retrieve the generated adminUser and password.&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-dc-admin-user/'&gt;&lt;img width="1586" height="616" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-admin-user.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-admin-user.png 1586w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-admin-user-300x117.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-admin-user-768x298.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-admin-user-1024x398.png 1024w" sizes="(max-width: 1586px) 100vw, 1586px" /&gt;&lt;/a&gt; &lt;p&gt;Log in into the Decision Central using the adminUser and import the project source code from the Gogs repository into Decision Central. Make sure it is the correct Gogs ssh URL, and note that we are using the internal svc hostname with port 1025.&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-import-project-from-gogs-2/'&gt;&lt;img width="1200" height="492" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-import-project-from-gogs-1.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-import-project-from-gogs-1.png 1200w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-import-project-from-gogs-1-300x123.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-import-project-from-gogs-1-768x315.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-import-project-from-gogs-1-1024x420.png 1024w" sizes="(max-width: 1200px) 100vw, 1200px" /&gt;&lt;/a&gt; &lt;p&gt;Now, try to make changes on one of the project files. If the integration works, you will see the changes being pushed into Gogs, and the Jenkins job will be started right after. Do note that the first Jenkins build will take longer.&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-dc-project-artifacts/'&gt;&lt;img width="3346" height="1660" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-project-artifacts.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-project-artifacts.png 3346w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-project-artifacts-300x149.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-project-artifacts-768x381.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-project-artifacts-1024x508.png 1024w" sizes="(max-width: 3346px) 100vw, 3346px" /&gt;&lt;/a&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-jenkins-builds/'&gt;&lt;img width="2488" height="1128" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-builds.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-builds.png 2488w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-builds-300x136.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-builds-768x348.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-builds-1024x464.png 1024w" sizes="(max-width: 2488px) 100vw, 2488px" /&gt;&lt;/a&gt; &lt;p&gt;As you have noticed, there is a kie-server deployed in the DEV environment. In your actual environment, you may want to deploy your decision services into the kie-server in DEV first. Ensure it is working before you deploy into SIT environment. With the know-how from this article, you can change the process when and where to suit your environment.&lt;/p&gt; &lt;h2&gt;What can you do next?&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Apply the same approach for your UAT environment.&lt;/li&gt; &lt;li&gt;Introduce a container image repository into your environment to minimize the need for frequent decision service build when you need to deploy the same decision services into multiple environments. You may consider Red Hat Quay or other equivalent repositories such as Nexus for this.&lt;/li&gt; &lt;li&gt;Introduce blue-green deployment to minimize the decision service deployment downtime.&lt;/li&gt; &lt;li&gt;Introduce a governance process as part of your DevOps journey.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;References&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/chengkuangan/travel-insurance-rules"&gt;A complete Decision Service sample project used in this tutorial&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.3/html/deploying_a_red_hat_decision_manager_authoring_or_managed_server_environment_on_red_hat_openshift_container_platform/dm-openshift-prepare-con#imagestreams-file-install-proc"&gt;How to enable the require image streams on OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.3/html/deploying_a_red_hat_decision_manager_authoring_or_managed_server_environment_on_red_hat_openshift_container_platform/"&gt;A complete guide on deploying RHDM on OpenShift&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Read more&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://blog.openshift.com/deploying-jenkins-on-openshift-part-1/"&gt;Deploying Jenkins on OpenShift: Part 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://blog.openshift.com/cloud-native-ci-cd-with-openshift-pipelines/"&gt;Cloud-Native CI/CD with OpenShift Pipelines&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#038;title=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/" data-a2a-title="Enabling CI/CD for Red Hat Decision Manager on OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/"&gt;Enabling CI/CD for Red Hat Decision Manager on OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2x0k0p9Ms2o" height="1" width="1" alt=""/&gt;</content><summary>As part of the microservices adoption journey, there will come a time when an organization starts to implement more and more rules services as part of the total application solution landscape. There could be hundreds of rules services to be managed and deployed at one time, making the job of the application team more challenging and eventually causing delays to the entire production rollout. Red H...</summary><dc:creator>chgan</dc:creator><dc:date>2019-07-22T07:00:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/</feedburner:origLink></entry><entry><title>How to build cloud-native CI/CD pipelines with Tekton on Kubernetes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ZKcCZr2BJC0/" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Tekton" scheme="searchisko:content:tags" /><author><name>Editorial Team</name></author><id>searchisko:content:id:jbossorg_blog-how_to_build_cloud_native_ci_cd_pipelines_with_tekton_on_kubernetes</id><updated>2019-07-22T06:59:08Z</updated><published>2019-07-22T06:59:08Z</published><content type="html">&lt;p&gt;Red Hat developer Nikhil Thomas recently presented &amp;#8220;How to Build Cloud-Native CI/CD Pipelines With Tekton on Kubernetes&amp;#8221; at the &lt;a href="https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2019/"&gt;KubeCon China 2019&lt;/a&gt; co-located Continuous Delivery Summit.&lt;/p&gt; &lt;p&gt;&lt;span id="more-612017"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In this conference session, Nikhil introduces his app and the associated CI/CD pipeline, then shows how &lt;a href="https://cloud.google.com/tekton/"&gt;Tekton&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; pipeline help support this process. In the video below, you can watch Nikhil work on the command line in real time.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/-ji5Z0qJmJs?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a href="https://drive.google.com/open?id=1TSkwHm57kmTaCYU7L-tCkfKJD9iX1Kvh"&gt;Download the slides here.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#038;title=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" data-a2a-url="https://developers.redhat.com/blog/2019/07/22/how-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes/" data-a2a-title="How to build cloud-native CI/CD pipelines with Tekton on Kubernetes"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/22/how-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes/"&gt;How to build cloud-native CI/CD pipelines with Tekton on Kubernetes&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ZKcCZr2BJC0" height="1" width="1" alt=""/&gt;</content><summary>Red Hat developer Nikhil Thomas recently presented “How to Build Cloud-Native CI/CD Pipelines With Tekton on Kubernetes” at the KubeCon China 2019 co-located Continuous Delivery Summit. In this conference session, Nikhil introduces his app and the associated CI/CD pipeline, then shows how Tekton and Red Hat OpenShift pipeline help support this process. In the video below, you can watch Nikhil work...</summary><dc:creator>Editorial Team</dc:creator><dc:date>2019-07-22T06:59:08Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/22/how-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes/</feedburner:origLink></entry></feed>
